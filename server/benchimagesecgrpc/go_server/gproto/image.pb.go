// Code generated by protoc-gen-go. DO NOT EDIT.
// source: image.proto

package benchimage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ImageGRPC struct {
	Content              [][]byte `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageGRPC) Reset()         { *m = ImageGRPC{} }
func (m *ImageGRPC) String() string { return proto.CompactTextString(m) }
func (*ImageGRPC) ProtoMessage()    {}
func (*ImageGRPC) Descriptor() ([]byte, []int) {
	return fileDescriptor_image_374b6ea2f4a6ece6, []int{0}
}
func (m *ImageGRPC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageGRPC.Unmarshal(m, b)
}
func (m *ImageGRPC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageGRPC.Marshal(b, m, deterministic)
}
func (dst *ImageGRPC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageGRPC.Merge(dst, src)
}
func (m *ImageGRPC) XXX_Size() int {
	return xxx_messageInfo_ImageGRPC.Size(m)
}
func (m *ImageGRPC) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageGRPC.DiscardUnknown(m)
}

var xxx_messageInfo_ImageGRPC proto.InternalMessageInfo

func (m *ImageGRPC) GetContent() [][]byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*ImageGRPC)(nil), "benchimage.ImageGRPC")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FilterGRPCClient is the client API for FilterGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilterGRPCClient interface {
	GrayscaleFilter(ctx context.Context, in *ImageGRPC, opts ...grpc.CallOption) (*ImageGRPC, error)
	InvertFilter(ctx context.Context, in *ImageGRPC, opts ...grpc.CallOption) (*ImageGRPC, error)
	CartoonFilter(ctx context.Context, in *ImageGRPC, opts ...grpc.CallOption) (*ImageGRPC, error)
	PencilFilter(ctx context.Context, in *ImageGRPC, opts ...grpc.CallOption) (*ImageGRPC, error)
	SobelFilter(ctx context.Context, in *ImageGRPC, opts ...grpc.CallOption) (*ImageGRPC, error)
}

type filterGRPCClient struct {
	cc *grpc.ClientConn
}

func NewFilterGRPCClient(cc *grpc.ClientConn) FilterGRPCClient {
	return &filterGRPCClient{cc}
}

func (c *filterGRPCClient) GrayscaleFilter(ctx context.Context, in *ImageGRPC, opts ...grpc.CallOption) (*ImageGRPC, error) {
	out := new(ImageGRPC)
	err := c.cc.Invoke(ctx, "/benchimage.FilterGRPC/GrayscaleFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterGRPCClient) InvertFilter(ctx context.Context, in *ImageGRPC, opts ...grpc.CallOption) (*ImageGRPC, error) {
	out := new(ImageGRPC)
	err := c.cc.Invoke(ctx, "/benchimage.FilterGRPC/InvertFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterGRPCClient) CartoonFilter(ctx context.Context, in *ImageGRPC, opts ...grpc.CallOption) (*ImageGRPC, error) {
	out := new(ImageGRPC)
	err := c.cc.Invoke(ctx, "/benchimage.FilterGRPC/CartoonFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterGRPCClient) PencilFilter(ctx context.Context, in *ImageGRPC, opts ...grpc.CallOption) (*ImageGRPC, error) {
	out := new(ImageGRPC)
	err := c.cc.Invoke(ctx, "/benchimage.FilterGRPC/PencilFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterGRPCClient) SobelFilter(ctx context.Context, in *ImageGRPC, opts ...grpc.CallOption) (*ImageGRPC, error) {
	out := new(ImageGRPC)
	err := c.cc.Invoke(ctx, "/benchimage.FilterGRPC/SobelFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilterGRPCServer is the server API for FilterGRPC service.
type FilterGRPCServer interface {
	GrayscaleFilter(context.Context, *ImageGRPC) (*ImageGRPC, error)
	InvertFilter(context.Context, *ImageGRPC) (*ImageGRPC, error)
	CartoonFilter(context.Context, *ImageGRPC) (*ImageGRPC, error)
	PencilFilter(context.Context, *ImageGRPC) (*ImageGRPC, error)
	SobelFilter(context.Context, *ImageGRPC) (*ImageGRPC, error)
}

func RegisterFilterGRPCServer(s *grpc.Server, srv FilterGRPCServer) {
	s.RegisterService(&_FilterGRPC_serviceDesc, srv)
}

func _FilterGRPC_GrayscaleFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterGRPCServer).GrayscaleFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchimage.FilterGRPC/GrayscaleFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterGRPCServer).GrayscaleFilter(ctx, req.(*ImageGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterGRPC_InvertFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterGRPCServer).InvertFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchimage.FilterGRPC/InvertFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterGRPCServer).InvertFilter(ctx, req.(*ImageGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterGRPC_CartoonFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterGRPCServer).CartoonFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchimage.FilterGRPC/CartoonFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterGRPCServer).CartoonFilter(ctx, req.(*ImageGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterGRPC_PencilFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterGRPCServer).PencilFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchimage.FilterGRPC/PencilFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterGRPCServer).PencilFilter(ctx, req.(*ImageGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterGRPC_SobelFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterGRPCServer).SobelFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchimage.FilterGRPC/SobelFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterGRPCServer).SobelFilter(ctx, req.(*ImageGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

var _FilterGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "benchimage.FilterGRPC",
	HandlerType: (*FilterGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrayscaleFilter",
			Handler:    _FilterGRPC_GrayscaleFilter_Handler,
		},
		{
			MethodName: "InvertFilter",
			Handler:    _FilterGRPC_InvertFilter_Handler,
		},
		{
			MethodName: "CartoonFilter",
			Handler:    _FilterGRPC_CartoonFilter_Handler,
		},
		{
			MethodName: "PencilFilter",
			Handler:    _FilterGRPC_PencilFilter_Handler,
		},
		{
			MethodName: "SobelFilter",
			Handler:    _FilterGRPC_SobelFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "image.proto",
}

func init() { proto.RegisterFile("image.proto", fileDescriptor_image_374b6ea2f4a6ece6) }

var fileDescriptor_image_374b6ea2f4a6ece6 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xcc, 0x4d, 0x4c,
	0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4a, 0x4a, 0xcd, 0x4b, 0xce, 0x00, 0x8b,
	0x28, 0xa9, 0x72, 0x71, 0x7a, 0x82, 0x18, 0xee, 0x41, 0x01, 0xce, 0x42, 0x12, 0x5c, 0xec, 0xc9,
	0xf9, 0x79, 0x25, 0xa9, 0x79, 0x25, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0x3c, 0x41, 0x30, 0xae, 0xd1,
	0x79, 0x26, 0x2e, 0x2e, 0xb7, 0xcc, 0x9c, 0x92, 0xd4, 0x22, 0xb0, 0x42, 0x47, 0x2e, 0x7e, 0xf7,
	0xa2, 0xc4, 0xca, 0xe2, 0xe4, 0xc4, 0x9c, 0x54, 0x88, 0xb0, 0x90, 0xa8, 0x1e, 0xc2, 0x54, 0x3d,
	0xb8, 0x91, 0x52, 0xd8, 0x85, 0x95, 0x18, 0x84, 0xec, 0xb8, 0x78, 0x3c, 0xf3, 0xca, 0x52, 0x8b,
	0x4a, 0xc8, 0xd4, 0x6f, 0xcf, 0xc5, 0xeb, 0x9c, 0x58, 0x54, 0x92, 0x9f, 0x9f, 0x47, 0xbe, 0x03,
	0x02, 0x52, 0xf3, 0x92, 0x33, 0x73, 0xc8, 0xd4, 0x6f, 0xcb, 0xc5, 0x1d, 0x9c, 0x9f, 0x94, 0x4a,
	0xa6, 0xf6, 0x24, 0x36, 0x70, 0x5c, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x36, 0xb1, 0xe0,
	0x38, 0x9a, 0x01, 0x00, 0x00,
}
